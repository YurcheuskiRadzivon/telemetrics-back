// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, username, phone_number)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	UserID      string `json:"user_id"`
	Username    string `json:"username"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.UserID, arg.Username, arg.PhoneNumber)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, phone_number FROM users WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(&i.UserID, &i.Username, &i.PhoneNumber)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $2, phone_number = $3
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID      string `json:"user_id"`
	Username    string `json:"username"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.UserID, arg.Username, arg.PhoneNumber)
	return err
}
