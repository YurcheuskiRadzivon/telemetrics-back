// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: view_options.sql

package queries

import (
	"context"
)

const createViewOptions = `-- name: CreateViewOptions :exec
INSERT INTO view_options (
    user_id, channel_count, tittle, about, channel_id,
    channel_date, participants_count, photo, message_count,
    message_id, views, post_date, reactions_count, reactions
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
`

type CreateViewOptionsParams struct {
	UserID            string `json:"user_id"`
	ChannelCount      int    `json:"channel_count"`
	Tittle            bool   `json:"tittle"`
	About             bool   `json:"about"`
	ChannelID         bool   `json:"channel_id"`
	ChannelDate       bool   `json:"channel_date"`
	ParticipantsCount bool   `json:"participants_count"`
	Photo             bool   `json:"photo"`
	MessageCount      int    `json:"message_count"`
	MessageID         bool   `json:"message_id"`
	Views             bool   `json:"views"`
	PostDate          bool   `json:"post_date"`
	ReactionsCount    bool   `json:"reactions_count"`
	Reactions         bool   `json:"reactions"`
}

func (q *Queries) CreateViewOptions(ctx context.Context, arg CreateViewOptionsParams) error {
	_, err := q.db.Exec(ctx, createViewOptions,
		arg.UserID,
		arg.ChannelCount,
		arg.Tittle,
		arg.About,
		arg.ChannelID,
		arg.ChannelDate,
		arg.ParticipantsCount,
		arg.Photo,
		arg.MessageCount,
		arg.MessageID,
		arg.Views,
		arg.PostDate,
		arg.ReactionsCount,
		arg.Reactions,
	)
	return err
}

const deleteViewOptions = `-- name: DeleteViewOptions :exec
DELETE FROM view_options WHERE user_id = $1
`

func (q *Queries) DeleteViewOptions(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteViewOptions, userID)
	return err
}

const getViewOptions = `-- name: GetViewOptions :one
SELECT user_id, channel_count, tittle, about, channel_id, channel_date, participants_count, photo, message_count, message_id, views, post_date, reactions_count, reactions FROM view_options WHERE user_id = $1
`

func (q *Queries) GetViewOptions(ctx context.Context, userID string) (ViewOption, error) {
	row := q.db.QueryRow(ctx, getViewOptions, userID)
	var i ViewOption
	err := row.Scan(
		&i.UserID,
		&i.ChannelCount,
		&i.Tittle,
		&i.About,
		&i.ChannelID,
		&i.ChannelDate,
		&i.ParticipantsCount,
		&i.Photo,
		&i.MessageCount,
		&i.MessageID,
		&i.Views,
		&i.PostDate,
		&i.ReactionsCount,
		&i.Reactions,
	)
	return i, err
}

const updateViewOptions = `-- name: UpdateViewOptions :exec
UPDATE view_options
SET
    channel_count = $2,
    tittle = $3,
    about = $4,
    channel_id = $5,
    channel_date = $6,
    participants_count = $7,
    photo = $8,
    message_count = $9,
    message_id = $10,
    views = $11,
    post_date = $12,
    reactions_count = $13,
    reactions = $14
WHERE user_id = $1
`

type UpdateViewOptionsParams struct {
	UserID            string `json:"user_id"`
	ChannelCount      int    `json:"channel_count"`
	Tittle            bool   `json:"tittle"`
	About             bool   `json:"about"`
	ChannelID         bool   `json:"channel_id"`
	ChannelDate       bool   `json:"channel_date"`
	ParticipantsCount bool   `json:"participants_count"`
	Photo             bool   `json:"photo"`
	MessageCount      int    `json:"message_count"`
	MessageID         bool   `json:"message_id"`
	Views             bool   `json:"views"`
	PostDate          bool   `json:"post_date"`
	ReactionsCount    bool   `json:"reactions_count"`
	Reactions         bool   `json:"reactions"`
}

func (q *Queries) UpdateViewOptions(ctx context.Context, arg UpdateViewOptionsParams) error {
	_, err := q.db.Exec(ctx, updateViewOptions,
		arg.UserID,
		arg.ChannelCount,
		arg.Tittle,
		arg.About,
		arg.ChannelID,
		arg.ChannelDate,
		arg.ParticipantsCount,
		arg.Photo,
		arg.MessageCount,
		arg.MessageID,
		arg.Views,
		arg.PostDate,
		arg.ReactionsCount,
		arg.Reactions,
	)
	return err
}
